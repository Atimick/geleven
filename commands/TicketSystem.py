import discord
import zipfile
import aiofiles
import os
from discord import app_commands
from discord.ext import commands
import random, datetime, asyncio, aiohttp, io
from zoneinfo import ZoneInfo
from commands.id_check import SECRET_TOKEN, TICKET_SHEET_URL 

class TicketSystem(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # üîß Config: √Ånh x·∫° Guild ID v·ªõi Category v√† Log Channel t∆∞∆°ng ·ª©ng
        # S·ª≠ d·ª•ng T√äN ROLE ƒë·ªÉ t·ª± t√¨m Role Staff trong Guild
        self.GUILD_CONFIGS = {
            733363418681049159: { #AM
                "CATEGORY_ID": 1430370909725790339,
                "LOG_CHANNEL_ID": 1430372059531313294,
                # üõë C·∫¶N THI·∫æT: ƒêi·ªÅn T√äN ch√≠nh x√°c c·ªßa role Staff/Mod (V√≠ d·ª•: "Admin", "Modder", "Qu·∫£n Tr·ªã Vi√™n")
                "STAFF_ROLE_NAME": "T√äN_ROLE_STAFF_AM", # <--- H√ÉY ƒêI·ªÄN T√äN ROLE ƒê√öNG T·∫†I ƒê√ÇY
            },
            1351910690499072072: { #BHG
                "CATEGORY_ID": 1430438851410923602,
                "LOG_CHANNEL_ID": 1352122809538838531,
                "STAFF_ROLE_NAME": "Modder",
            },
            # Th√™m c√°c server kh√°c...
        }

    # ---------------------------
    # üé´ /ticket create
    # ---------------------------
    @app_commands.command(name="ticket_create", description="T·∫°o m·ªôt ticket m·ªõi")
    @app_commands.describe(noidung="L√Ω do ho·∫∑c m√¥ t·∫£ y√™u c·∫ßu c·ªßa b·∫°n")
    async def ticket_create(self, interaction: discord.Interaction, noidung: str):
        guild = interaction.guild
        user = interaction.user
        
        # L·∫•y config cho Guild hi·ªán t·∫°i
        guild_config = self.GUILD_CONFIGS.get(guild.id)
        if not guild_config:
            await interaction.response.send_message("‚ùå Server n√†y ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh cho h·ªá th·ªëng ticket.", ephemeral=True)
            return
                
        # L·∫•y STAFF_ROLE_NAME v√† Category ID
        category_id = guild_config["CATEGORY_ID"]
        staff_role_name = guild_config["STAFF_ROLE_NAME"] # L·∫•y t√™n role
        
        # Ki·ªÉm tra user ƒë√£ c√≥ ticket ch∆∞a (c·∫ßn ki·ªÉm tra c·∫£ Category ID)
        for ch in guild.text_channels:
            # Ki·ªÉm tra: k√™nh ph·∫£i l√† ticket-XXX V√Ä ng∆∞·ªùi d√πng l√† th√†nh vi√™n V√Ä n·∫±m trong category ch√≠nh x√°c
            if ch.name.startswith("ticket-") and user in ch.members and ch.category_id == category_id:
                await interaction.response.send_message(
                    f"‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt ticket ƒëang m·ªü: {ch.mention}",
                    ephemeral=True
                )
                return

        # Sinh t√™n ticket: ticket-YYMMDD-1234
        date = datetime.datetime.now().strftime("%y%m%d")
        rand = random.randint(1000, 9999)
        ticket_name = f"ticket-{date}-{rand}"

        category = guild.get_channel(category_id)
        if not category:
            await interaction.response.send_message("‚ùå Kh√¥ng t√¨m th·∫•y Category Ticket.", ephemeral=True)
            return
        
        # === 1. T√åM ROLE STAFF THEO T√äN (Kh√¥ng ph·ª• thu·ªôc v√†o ID) ===
        staff_role = discord.utils.get(guild.roles, name=staff_role_name)
        
        if not staff_role:
             # C·∫£nh b√°o n·∫øu kh√¥ng t√¨m th·∫•y role theo t√™n (D√π v·∫´n t·∫°o ticket, nh∆∞ng staff kh√¥ng th·∫•y)
             print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y Role Staff c√≥ t√™n '{staff_role_name}' trong Guild {guild.name}. Staff s·∫Ω kh√¥ng th·∫•y ticket m·ªõi.")
        # =================================

        # 2. Thi·∫øt l·∫≠p quy·ªÅn c∆° b·∫£n
        overwrites = {
            # B·∫Øt bu·ªôc C·∫§M @everyone (ƒë·ªÉ ·∫©n ticket)
            guild.default_role: discord.PermissionOverwrite(read_messages=False), 
            # B·∫Øt bu·ªôc CHO PH√âP ng∆∞·ªùi t·∫°o ticket
            user: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        
        # 3. Ghi ƒë√® quy·ªÅn cho Role Staff/Mod n·∫øu t√¨m th·∫•y
        # ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng ƒë·ªÉ ƒë·∫£m b·∫£o Staff th·∫•y k√™nh, tr√°nh l·ªói k·∫ø th·ª´a Discord
        if staff_role:
            # Ghi ƒë√® quy·ªÅn cho Role Staff/Mod: CHO PH√âP ƒë·ªçc v√† g·ª≠i tin nh·∫Øn
            overwrites[staff_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        
        # üî¥ Th√™m ID ng∆∞·ªùi t·∫°o v√†o Topic c·ªßa k√™nh ƒë·ªÉ truy xu·∫•t ch√≠nh x√°c
        # Format: TICKET_OPENER_ID:1234567890 | L√Ω do m·ªü ticket: M√¥ t·∫£
        topic_content = f"TICKET_OPENER_ID:{user.id} | L√Ω do m·ªü ticket: {noidung}"
        
        channel = await category.create_text_channel(
            name=ticket_name, 
            overwrites=overwrites, 
            topic=topic_content
        )

        embed = discord.Embed(
            title="üé´ Ticket ƒê∆∞·ª£c T·∫°o!",
            description=f"Ng∆∞·ªùi y√™u c·∫ßu: {user.mention}\n**L√Ω do:** {noidung}",
            color=discord.Color.blue()
        )
        embed.set_footer(text="Staff s·∫Ω s·ªõm h·ªó tr·ª£ b·∫°n.")
        await channel.send(embed=embed)
        await interaction.response.send_message(
            f"‚úÖ Ticket c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o: {channel.mention}", ephemeral=True
        )

    # ---------------------------
    # üé´ /ticket close
    # ---------------------------
    @app_commands.command(name="ticket_close", description="ƒê√≥ng ticket, l∆∞u log v√† g·ª≠i ƒë·∫øn Google Sheet")
    async def ticket_close(self, interaction: discord.Interaction):
        # S·ª≠ d·ª•ng is_mod() ƒë·ªÉ ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn ƒë√≥ng ticket kh√¥ng
        if not is_mod(interaction):
            await interaction.response.send_message(
                "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√≥ng ticket n√†y.",
                ephemeral=True
            )
            return

        channel = interaction.channel
        if not channel.name.startswith("ticket-"):
            await interaction.response.send_message(
                "‚ö†Ô∏è L·ªánh n√†y ch·ªâ d√πng trong k√™nh ticket!",
                ephemeral=True
            )
            return

        await interaction.response.send_message("‚è≥ Saving...", ephemeral=True)

        # === Tra c·ª©u c·∫•u h√¨nh cho Guild hi·ªán t·∫°i ===
        guild_config = self.GUILD_CONFIGS.get(interaction.guild_id)
        if not guild_config:
            await interaction.followup.send("‚ùå Server n√†y ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh cho h·ªá th·ªëng ticket.", ephemeral=True)
            return
            
        LOG_CHANNEL_ID = guild_config["LOG_CHANNEL_ID"] 
        # ============================================

        # === L·∫•y ng∆∞·ªùi t·∫°o ticket B·∫∞NG C√ÅCH PARSE TOPIC ===
        ticket_opener = None
        opener_id = "Unknown"
        opener_name = "Unknown"
        
        # 1. T√¨m ID t·ª´ Topic
        if channel.topic and "TICKET_OPENER_ID:" in channel.topic:
            try:
                # Ph√¢n t√≠ch Topic: L·∫•y ph·∫ßn ƒë·∫ßu ti√™n (tr∆∞·ªõc |)
                topic_parts = channel.topic.split('|', 1)
                id_part = topic_parts[0].strip()
                
                if id_part.startswith("TICKET_OPENER_ID:"):
                    opener_id = id_part.split(':')[1].strip()
                    ticket_opener = self.bot.get_user(int(opener_id))
                    
                    if ticket_opener:
                        opener_name = str(ticket_opener)
                    else:
                        opener_name = f"User R·ªùi Server ({opener_id})"
                        
            except Exception as e:
                print(f"L·ªói khi parse ticket opener ID t·ª´ topic: {e}")
                
        # 2. Fallback cho ticket c≈© ho·∫∑c l·ªói parse
        if opener_id == "Unknown":
            async for msg in channel.history(limit=50, oldest_first=True):
                if not msg.author.bot:
                    ticket_opener = msg.author
                    opener_id = str(ticket_opener.id)
                    opener_name = str(ticket_opener)
                    break
            if opener_id == "Unknown":
                opener_name = "Unknown (Ch·ªâ c√≥ Bot/Ticket c≈©)"
        # =================================================================================
        vn_timezone = ZoneInfo("Asia/Ho_Chi_Minh")
        
        # Open Time (Th·ªùi gian m·ªü ticket, l·∫•y t·ª´ created_at c·ªßa k√™nh)
        open_time_utc = channel.created_at
        open_time_vn = open_time_utc.astimezone(vn_timezone).strftime("%Y-%m-%d %H:%M:%S")

        # Closed Time (Th·ªùi gian ƒë√≥ng ticket, l√† th·ªùi ƒëi·ªÉm hi·ªán t·∫°i)
        closed_time_utc_naive = datetime.datetime.now()
        closed_time_utc = closed_time_utc_naive.replace(tzinfo=datetime.timezone.utc)
        closed_time_vn = closed_time_utc.astimezone(vn_timezone).strftime("%Y-%m-%d %H:%M:%S")
        # =====================================
        
        # Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n file t·∫°m
        os.makedirs("temp_logs", exist_ok=True)
        transcript_name = f"{channel.name}_transcript.txt"
        transcript_path = os.path.join("temp_logs", transcript_name)
        zip_filename = f"{channel.name}_log.zip"
        zip_path = os.path.join("temp_logs", zip_filename)
        download_paths = [] # Danh s√°ch c√°c ƒë∆∞·ªùng d·∫´n file ƒë√≠nh k√®m

        # ---- 1Ô∏è‚É£ G·ª≠i l√™n Google Sheet ----
        ticket_info = channel.topic.split('|', 1)[1].strip() if channel.topic and '|' in channel.topic else channel.topic or "(Kh√¥ng c√≥ ghi ch√∫)"
        
        payload = {
            "secret": SECRET_TOKEN,
            "server_id": str(interaction.guild.id),
            "ticket_id": channel.name,
            "category_id": str(channel.category_id or ""),
            "ticket_info": ticket_info,
            "user_id": opener_id, 
            "user_name": opener_name, 
            "open_time": open_time_vn, 
            "staff_id": str(interaction.user.id),
            "staff_name": str(interaction.user),
            "closed_time": closed_time_vn,
            "zip_log_url": f"https://discord.com/channels/{interaction.guild.id}/{LOG_CHANNEL_ID}"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(TICKET_SHEET_URL, json=payload) as resp:
                sheet_ok = resp.status == 200

        log_channel = self.bot.get_channel(LOG_CHANNEL_ID)

        if log_channel is None:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√™nh ho·∫∑c thread c√≥ ID {LOG_CHANNEL_ID}")
            log_ok = False
        else:
            # N·∫øu thread b·ªã archive th√¨ m·ªü l·∫°i ƒë·ªÉ g·ª≠i ƒë∆∞·ª£c
            if isinstance(log_channel, discord.Thread) and log_channel.archived:
                try:
                    await log_channel.edit(archived=False, locked=False)
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü l·∫°i thread: {e}")

            # === 2Ô∏è‚É£ Thu th·∫≠p n·ªôi dung tin nh·∫Øn v√† t·∫£i file ƒë√≠nh k√®m ===
            messages = []
            attachments = []

            async for msg in channel.history(limit=None, oldest_first=True):
                content = msg.content.replace("\n", " ")
                line = f"[{msg.created_at.astimezone(vn_timezone).strftime('%Y-%m-%d %H:%M:%S')}] {msg.author}: {content}"

                if msg.attachments:
                    urls = []
                    for att in msg.attachments:
                        urls.append(att.url)
                        attachments.append(att)
                        
                        # T·∫£i file ƒë√≠nh k√®m
                        try:
                            file_path = os.path.join("temp_logs", f"{att.id}_{att.filename}")
                            await att.save(file_path)
                            download_paths.append(file_path)
                        except Exception as e:
                            print(f"‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c file {att.filename}: {e}")

                    line += f" [üìé Attachments: {' '.join(urls)}]"

                messages.append(line)

            transcript_text = "\n".join(messages) or "(Kh√¥ng c√≥ tin nh·∫Øn)"

            # === 3Ô∏è‚É£ L∆∞u file transcript ===
            async with aiofiles.open(transcript_path, mode="w", encoding="utf-8") as f:
                await f.write(transcript_text)

            # === 4Ô∏è‚É£ T·∫†O file ZIP (S·ª≠ d·ª•ng asyncio.to_thread cho t√°c v·ª• ch·∫∑n) ===
            def create_zip_blocking():
                with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
                    # Ghi transcript
                    zipf.write(transcript_path, os.path.basename(transcript_path))
                    # Ghi c√°c file ƒë√≠nh k√®m ƒë√£ t·∫£i
                    for f in download_paths:
                        zipf.write(f, os.path.basename(f))
            
            await asyncio.to_thread(create_zip_blocking)
            
            # === 5Ô∏è‚É£ G·ª≠i log l√™n thread ===
            embed = discord.Embed(
                title="üì¶ Ticket Log (Full)",
                description=f"**Ticket:** {channel.name}\n**Closed by:** {interaction.user.mention}\n**Th·ªùi gian ƒë√≥ng (VN):** {closed_time_vn}\n**T·ªïng s·ªë file:** {len(download_paths)}",
                color=discord.Color.orange()
            )
            embed.add_field(name="Server g·ªëc", value=f"{interaction.guild.name} (`{interaction.guild.id}`)", inline=False)
            embed.set_footer(text="Geleven Ticket Log")

            try:
                await log_channel.send(embed=embed, file=discord.File(zip_path))
                log_ok = True
            except Exception as e:
                log_ok = False
                print(f"‚ö†Ô∏è L·ªói g·ª≠i log: {e}")

            # === 6Ô∏è‚É£ Xo√° file t·∫°m (S·ª≠ d·ª•ng asyncio.to_thread) ===
            def cleanup_blocking():
                try:
                    os.remove(transcript_path)
                    os.remove(zip_path)
                    for f in download_paths:
                        os.remove(f)
                except Exception as e:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° file t·∫°m: {e}")

            await asyncio.to_thread(cleanup_blocking)
        
        # 7Ô∏è‚É£ G·ª≠i ph·∫£n h·ªìi cu·ªëi c√πng v√† Xo√° k√™nh ticket
        # G·ª≠i ph·∫£n h·ªìi followup TR∆Ø·ªöC khi x√≥a k√™nh ƒë·ªÉ tr√°nh l·ªói "Unknown Channel"
        try:
            # G·ª≠i th√¥ng b√°o ho√†n t·∫•t ƒë·∫øn ng∆∞·ªùi d√πng qua ph·∫£n h·ªìi t∆∞∆°ng t√°c (followup)
            await interaction.followup.send(
                f"‚úÖ Ticket **{channel.name}** ƒë√£ ƒë∆∞·ª£c ƒë√≥ng v√† x√≥a. Th·ªùi gian ƒë√≥ng: **{closed_time_vn}**",
                ephemeral=True
            )
            
            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o Discord x·ª≠ l√Ω xong ph·∫£n h·ªìi webhook
            await asyncio.sleep(0.5) 
            
            # Ti·∫øn h√†nh x√≥a k√™nh
            await channel.delete(reason="Ticket closed by staff command /ticket_close")
            
        except Exception as e:
            # X·ª≠ l√Ω n·∫øu k√™nh b·ªã x√≥a qu√° nhanh ho·∫∑c c√°c l·ªói kh√°c
            if "Unknown Channel" not in str(e):
                print(f"L·ªói khi x√≥a k√™nh ho·∫∑c g·ª≠i followup: {e}")
                # N·∫øu l·ªói kh√¥ng ph·∫£i do k√™nh b·ªã x√≥a, ta c·ªë g·∫Øng g·ª≠i th√¥ng b√°o l·ªói x√≥a k√™nh
                await interaction.followup.send(
                    f"‚ùå ƒê√£ l∆∞u log nh∆∞ng kh√¥ng th·ªÉ x√≥a k√™nh. L·ªói: {e}",
                    ephemeral=True
                )
            else:
                 # Ghi nh·∫≠n k√™nh b·ªã x√≥a qu√° nhanh nh∆∞ng kh√¥ng g·ª≠i th√™m followup (tr√°nh l·ªói l·∫∑p)
                 print(f"L·ªñI: K√™nh ƒë√£ b·ªã x√≥a tr∆∞·ªõc khi g·ª≠i ph·∫£n h·ªìi cu·ªëi c√πng. B·ªè qua l·ªói {e}")


# üöÄ B·∫Øt bu·ªôc ph·∫£i c√≥ h√†m setup ƒë·ªÉ Discord.py c√≥ th·ªÉ load module n√†y
async def setup(bot: commands.Bot):
    await bot.add_cog(TicketSystem(bot))
