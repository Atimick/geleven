import discord
import os
from datetime import datetime
from discord import app_commands, Interaction, ChannelType
from discord.ext import commands
from zoneinfo import ZoneInfo
from .id_check import is_admin
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .id_check import is_admin, DB_PATH

Engine = create_engine(DB_PATH)
Base = declarative_base()
Session = sessionmaker(autocommit=False, autoflush=False, bind=Engine)

class LogCommandUsage(Base):
    """M√¥ h√¨nh SQLAlchemy cho b·∫£ng logs vi·ªác s·ª≠ d·ª•ng c√°c l·ªánh Admin."""
    __tablename__ = 'command_usage_logs'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.utcnow)
    guild_id = Column(String) # ID Server
    guild_name = Column(String) # T√™n Server
    channel_id = Column(String)
    command_name = Column(String)
    user_id = Column(String)
    user_name = Column(String)

Base.metadata.create_all(Engine)

class PurgeChat(commands.Cog): # CLASS M·ªöI: PurgeChat
    def __init__(self, bot):
        self.bot = bot

    def log_command_usage(self, user: discord.User, command_name: str, interaction: Interaction):
        session = Session() 
        try:
            guild_id = str(interaction.guild_id) if interaction.guild_id else "DM"
            guild_name = interaction.guild.name if interaction.guild else "DM"
            
            new_log = LogCommandUsage(
                guild_id=guild_id,
                guild_name=guild_name,
                channel_id=str(interaction.channel_id),
                command_name=command_name,
                user_id=str(user.id),
                user_name=str(user)
            )
            
            session.add(new_log)
            session.commit() # Ghi v√†o bot_data.db
            
        except Exception as db_error:
            session.rollback() # Ho√†n t√°c n·∫øu c√≥ l·ªói
            # C√≥ th·ªÉ log l·ªói ra console ƒë·ªÉ debug, nh∆∞ng kh√¥ng g·ª≠i cho ng∆∞·ªùi d√πng Discord
            print(f"L·ªói khi ghi logs SQLAlchemy: {db_error}") 
        finally:
            session.close()

    @app_commands.command(name="purgechat", description="X√≥a tin nh·∫Øn trong k√™nh chat, bao g·ªìm c·∫£ k√™nh voice chat. (Admin Only)")
    @app_commands.check(is_admin) # CH·ªà ADMIN ID C·ª®NG M·ªöI ƒê∆Ø·ª¢C D√ôNG
    async def purgechat(self, interaction: Interaction):
        """
        X√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh hi·ªán t·∫°i ng∆∞·ª£c v·ªÅ qu√° kh·ª© 14 ng√†y,
        kh√¥ng x√≥a tin nh·∫Øn ƒë√£ ghim v√† tin nh·∫Øn g·ª≠i sau khi l·ªánh ƒë∆∞·ª£c g·ªçi.
        """
        if not is_admin(interaction):
            return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn **Admin** ƒë·ªÉ d√πng l·ªánh n√†y.", ephemeral=True)
            
        self.log_command_usage(interaction.user, "purgechat", interaction)

        target_channel = interaction.channel
        
        # ... (Ph·∫ßn ki·ªÉm tra k√™nh v√† quy·ªÅn gi·ªØ nguy√™n)
        if not isinstance(target_channel, (discord.TextChannel, discord.VoiceChannel)):
            await interaction.response.send_message(
                "‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c k√™nh chat ho·∫∑c k√™nh voice c√≥ chat.",
                ephemeral=True
            )
            return

        if isinstance(target_channel, discord.VoiceChannel):
            if not target_channel.permissions_for(interaction.guild.me).manage_messages:
                 await interaction.response.send_message(
                    "‚ùå Bot c·∫ßn quy·ªÅn **Qu·∫£n l√Ω tin nh·∫Øn** trong k√™nh voice n√†y.",
                    ephemeral=True
                )
                 return
            pass 

        await interaction.response.defer(thinking=True, ephemeral=True)

        try:
            deleted_messages = await target_channel.purge(
                limit=None,
                before=interaction.created_at,
                check=lambda m: not m.pinned
            )
            
            await interaction.followup.send(
                f"üßπ ƒê√£ d·ªçn d·∫πp th√†nh c√¥ng **{len(deleted_messages)}** tin nh·∫Øn.",
                ephemeral=True
            )

        except discord.Forbidden:
            await interaction.followup.send(
                "‚ùå Bot kh√¥ng c√≥ quy·ªÅn **Qu·∫£n l√Ω tin nh·∫Øn** trong k√™nh n√†y.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: `{e}`",
                ephemeral=True
            )

async def setup(bot):
    await bot.add_cog(PurgeChat(bot))