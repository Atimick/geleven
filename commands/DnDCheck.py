import discord
import os
import json
# import openpyxl # ƒê√£ lo·∫°i b·ªè
from discord.ext import commands
from discord import app_commands, Interaction
from datetime import datetime
from zoneinfo import ZoneInfo
# ƒê√£ thay LOG_FOLDER b·∫±ng DB_PATH
from .id_check import DB_PATH 

# ‚úÖ START SQLALCHEMY SETUP
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

Engine = create_engine(DB_PATH)
Base = declarative_base()
Session = sessionmaker(autocommit=False, autoflush=False, bind=Engine)

class LogCommandUsage(Base):
    """M√¥ h√¨nh SQLAlchemy cho b·∫£ng logs vi·ªác s·ª≠ d·ª•ng c√°c l·ªánh qu·∫£n l√Ω chung v√† Public."""
    __tablename__ = 'command_usage_logs'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.now)
    guild_id = Column(String) 
    guild_name = Column(String) 
    channel_id = Column(String)
    command_name = Column(String)
    user_id = Column(String)
    user_name = Column(String)
    
# T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
Base.metadata.create_all(Engine) 
# ‚úÖ END SQLALCHEMY SETUP

class DnDCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # ‚úÖ H√ÄM GHI LOGS M·ªöI (D√πng SQLAlchemy)
    def log_command_usage(self, user: discord.User, command_name: str, interaction: Interaction):
        session = Session() 
        try:
            guild_id = str(interaction.guild_id) if interaction.guild_id else "DM"
            guild_name = interaction.guild.name if interaction.guild else "DM"
            
            new_log = LogCommandUsage(
                guild_id=guild_id,
                guild_name=guild_name,
                channel_id=str(interaction.channel_id),
                command_name=command_name,
                user_id=str(user.id),
                user_name=str(user)
            )
            
            session.add(new_log)
            session.commit()
            
        except Exception as db_error:
            session.rollback() 
            print(f"L·ªói khi ghi logs SQLAlchemy cho {command_name}: {db_error}") 
        finally:
            session.close()

    @app_commands.command(name="dnd", description="G·ª≠i th√¥ng tin nh√¢n v·∫≠t DnD qua DM.")
    async def dnd_command(self, interaction: discord.Interaction):
        
        # ‚úÖ C·∫≠p nh·∫≠t call log ƒë·ªÉ truy·ªÅn ƒë·ªëi t∆∞·ª£ng interaction
        self.log_command_usage(interaction.user, "dnd", interaction)

        file_name = "DnD Characters Info.json"
        
        # ƒê∆∞·ªùng d·∫´n file json (gi·ªØ nguy√™n logic t√¨m file)
        file_path = os.path.join(os.path.dirname(__file__), file_name)

        try:
            await interaction.response.defer(thinking=True, ephemeral=True) 

            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            embeds = [discord.Embed.from_dict(e) for e in data.get("embeds", [])]

            if not embeds:
                 await interaction.followup.send("‚ùå File JSON kh√¥ng ch·ª©a Embed n√†o.", ephemeral=True)
                 return

            for e in embeds:
                # G·ª≠i embed qua DM
                await interaction.user.send(embed=e)

            await interaction.followup.send(f"üì© ƒê√£ g·ª≠i th√¥ng tin **Valentine** qua DM! (T·ªïng c·ªông {len(embeds)} tin nh·∫Øn).", ephemeral=True)

        except FileNotFoundError:
            await interaction.followup.send(f"‚ùå Kh√¥ng t√¨m th·∫•y file `{file_name}`. H√£y ƒë·∫£m b·∫£o file n·∫±m c√πng th∆∞ m·ª•c.", ephemeral=True)
        except discord.Forbidden:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ g·ª≠i DM, b·∫°n h√£y b·∫≠t tin nh·∫Øn ri√™ng ho·∫∑c Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i DM.", ephemeral=True)
        except Exception as e:
            await interaction.followup.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: `{e}`", ephemeral=True)

async def setup(bot):
    await bot.add_cog(DnDCog(bot))