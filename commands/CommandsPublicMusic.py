# CommandsPublicMusic.py
import discord
import time
import yt_dlp
import asyncio
from discord.ext import commands
from discord import app_commands
from discord import FFmpegPCMAudio
from .CommandsPublicMusic_Queue import MusicQueue
from .CommandsPublicMusic_Control import MusicControlView # Import View

guild_queues = {}

def get_music_queue(guild_id, bot: commands.Bot) -> MusicQueue:
    """L·∫•y ho·∫∑c t·∫°o MusicQueue cho Guild ID c·ª• th·ªÉ."""
    if guild_id not in guild_queues:
        music_queue = MusicQueue()
        music_queue.bot = bot # G√°n bot instance CH·ªà KHI T·∫†O
        guild_queues[guild_id] = music_queue
    return guild_queues[guild_id]


async def setup(bot: commands.Bot):
    @bot.tree.command(name="play", description="Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c Playlist")
    @app_commands.describe(url="Link YouTube ho·∫∑c t·ª´ kh√≥a")
    async def play(interaction: discord.Interaction, url: str):
        # B∆∞·ªõc 1: Defer Interaction ngay l·∫≠p t·ª©c
        await interaction.response.defer(thinking=True)
        
        # 1. KI·ªÇM TRA GUILD V√Ä USER
        if not interaction.guild:
            await interaction.followup.send("‚ùå L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong server.", ephemeral=True)
            return
            
        music_queue = get_music_queue(interaction.guild.id, bot)

        if not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.followup.send("‚ùå B·∫°n c·∫ßn v√†o voice channel tr∆∞·ªõc!", ephemeral=True)
            return

        voice_channel = interaction.user.voice.channel
        
        # 2. KHAI B√ÅO BI·∫æN
        max_retries = 3
        retry_delay = 2

        # 3. V√íNG L·∫∂P K·∫æT N·ªêI VOICE (CH·ªà C√ì M·ªòT L·∫¶N CH·∫†Y DUY NH·∫§T)
        vc = interaction.guild.voice_client
        for attempt in range(max_retries):
            try:
                # N·∫øu bot ch∆∞a k·∫øt n·ªëi, k·∫øt n·ªëi m·ªõi
                if vc is None:
                    vc = await voice_channel.connect(timeout=10.0, reconnect=True)
                # N·∫øu bot ƒë√£ k·∫øt n·ªëi nh∆∞ng ·ªü k√™nh kh√°c, di chuy·ªÉn
                elif vc.channel != voice_channel:
                    await vc.move_to(voice_channel)
                # N·∫øu bot ƒë√£ k·∫øt n·ªëi v√† ·ªü ƒë√∫ng k√™nh, kh√¥ng l√†m g√¨
                
                music_queue.vc = vc
                break # K·∫øt n·ªëi th√†nh c√¥ng, tho√°t v√≤ng l·∫∑p
            
            except Exception as e:
                # X·ª≠ l√Ω khi k·∫øt n·ªëi th·∫•t b·∫°i
                print(f"[L·ªñI K·∫æT N·ªêI VOICE] Th·ª≠ {attempt+1}/{max_retries}: {e}")
                
                if attempt < max_retries - 1:
                    await asyncio.sleep(retry_delay)
                else:
                    # Logic S·ª¨A L·ªñI 4006: Bu·ªôc ng·∫Øt k·∫øt n·ªëi d·ª©t kho√°t n·∫øu th·∫•t b·∫°i
                    if interaction.guild.voice_client:
                        try:
                            # ƒê·∫£m b·∫£o bot kh√¥ng b·ªã k·∫πt trong tr·∫°ng th√°i voice l·ªói
                            await interaction.guild.voice_client.disconnect(force=True)
                        except:
                            pass 
                            
                    music_queue.vc = None
                    
                    await interaction.followup.send(
                        "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn voice channel sau nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau 5 gi√¢y.", 
                        ephemeral=True
                    )
                    return # Tho√°t l·ªánh v√¨ ƒë√£ th·∫•t b·∫°i

        # 4. LOGIC X·ª¨ L√ù NH·∫†C (Ph·∫ßn n√†y ƒë√£ ·ªïn ƒë·ªãnh)
        ydl_opts = {
            'format': 'bestaudio/best',
            'quiet': True,
            'default_search': 'auto',
            'noplaylist': False,
            'extract_flat': False,
            'force_generic_extractor': False,
            'socket_timeout': 10,
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                entries = info['entries'] if 'entries' in info else [info]
                added_count = 0
                
                for entry in entries:
                    stream_url = None
                    # ... (logic l·∫•y stream_url gi·ªØ nguy√™n)
                    try:
                        # Th·ª≠ l·∫•y URL t·ª´ formats
                        formats = entry.get('formats', [])
                        audio_format = next((f for f in formats if f.get('acodec') != 'none' and f.get('vcodec') == 'none'), None)
                        stream_url = audio_format['url'] if audio_format else None
                    except Exception as e:
                        print(f"[L·ªñI L·∫§Y URL] {e}")

                    if not stream_url:
                        print(f"[L·ªñI] Kh√¥ng t√¨m th·∫•y stream URL cho: {entry.get('title')}")
                        continue
                    
                    song = {
                        'title': entry.get('title', 'Kh√¥ng r√µ ti√™u ƒë·ªÅ'),
                        'url': stream_url,
                        'webpage_url': entry.get('webpage_url', url),
                        'requester': interaction.user
                    }
                    music_queue.add_song(song)
                    added_count += 1
                if added_count == 0:
                    await interaction.followup.send("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t h·ª£p l·ªá ƒë·ªÉ th√™m v√†o h√†ng ƒë·ª£i.", ephemeral=True)
                    return

                embed = discord.Embed(
                    title="üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i",
                    description=f"‚úÖ ƒê√£ th√™m `{added_count}` b√†i v√†o h√†ng ƒë·ª£i.",
                    color=discord.Color.blue()
                )
                await interaction.followup.send(embed=embed)
                
                # B·∫Øt ƒë·∫ßu ph√°t n·∫øu bot ch∆∞a ph√°t
                if not music_queue.is_playing:
                    await music_queue.play_next(interaction.channel)

        except Exception as e:
            print(f"[L·ªñI PLAY] {e}")
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ ph√°t video ho·∫∑c playlist. L·ªói: " + str(e), ephemeral=True)

    @bot.tree.command(name="stop", description="D·ª´ng ph√°t nh·∫°c v√† r·ªùi kh·ªèi voice channel")
    async def stop(interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong server.", ephemeral=True)
            return

        music_queue = get_music_queue(interaction.guild.id, bot)
        vc = interaction.guild.voice_client

        if vc and vc.is_connected():
            await music_queue.stop() # D·ª´ng ph√°t, xo√° h√†ng ƒë·ª£i, ng·∫Øt k·∫øt n·ªëi an to√†n
            await interaction.response.send_message("‚õî Bot ƒë√£ r·ªùi voice channel.", ephemeral=True)
            # Xo√° queue c·ªßa Guild ƒë·ªÉ d·ªçn d·∫πp b·ªô nh·ªõ
            if interaction.guild.id in guild_queues:
                del guild_queues[interaction.guild.id]
        else:
            await interaction.response.send_message("‚ùå Bot kh√¥ng ·ªü voice channel n√†o.", ephemeral=True)

    @bot.tree.command(name="status", description="Ki·ªÉm tra tr·∫°ng th√°i bot nh·∫°c")
    async def status(interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong server.", ephemeral=True)
            return

        # L·∫•y queue c·ªßa Guild
        music_queue = get_music_queue(interaction.guild.id, bot)
        
        # ... (Logic t·∫°o Embed gi·ªØ nguy√™n, s·ª≠ d·ª•ng music_queue ƒë√£ l·∫•y)

        embed = discord.Embed(title="üéµ Tr·∫°ng th√°i bot nh·∫°c", color=discord.Color.blue())
        if music_queue.is_playing and music_queue.current_song:
            elapsed_time = time.time() - music_queue.start_time if music_queue.start_time else 0
            minutes, seconds = divmod(int(elapsed_time), 60)
            elapsed_str = f"{minutes:02d}:{seconds:02d}"
            embed.add_field(
                name="ƒêang ph√°t",
                value=f"[{music_queue.current_song['title']}]({music_queue.current_song['webpage_url']})\n"
                      f"üë§ Y√™u c·∫ßu b·ªüi: {music_queue.current_song['requester'].mention}\n"
                      f"‚è∞ Th·ªùi gian: {elapsed_str}",
                inline=False
            )
        else:
            embed.add_field(name="ƒêang ph√°t", value="Kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t", inline=False)
        
        embed.add_field(name="K·∫øt n·ªëi voice", value="ƒê√£ k·∫øt n·ªëi" if music_queue.vc and music_queue.vc.is_connected() else "Ch∆∞a k·∫øt n·ªëi", inline=False)
        embed.add_field(name="H√†ng ƒë·ª£i", value=f"{len(music_queue.queue)} b√†i" if music_queue.queue else "Tr·ªëng", inline=False)
        await interaction.response.send_message(embed=embed)