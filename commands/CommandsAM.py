import discord
import os
from datetime import datetime, timedelta, timezone
from discord import app_commands, Interaction, Embed, File, ChannelType
from discord.ext import commands

# ‚úÖ Import SQLAlchemy
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Thay th·∫ø c√°c ƒë∆∞·ªùng d·∫´n Excel b·∫±ng DB_PATH
from .id_check import is_admin, is_allowed, DB_PATH 

# ‚úÖ START SQLALCHEMY SETUP
Engine = create_engine(DB_PATH)
Base = declarative_base()
Session = sessionmaker(autocommit=False, autoflush=False, bind=Engine)

class LogCommandUsage(Base):
    """M√¥ h√¨nh SQLAlchemy cho b·∫£ng logs vi·ªác s·ª≠ d·ª•ng c√°c l·ªánh qu·∫£n l√Ω chung."""
    __tablename__ = 'command_usage_logs'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.now)
    guild_id = Column(String) 
    guild_name = Column(String) 
    channel_id = Column(String)
    command_name = Column(String)
    user_id = Column(String)
    user_name = Column(String)
    
# T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
Base.metadata.create_all(Engine) 
# ‚úÖ END SQLALCHEMY SETUP

class AMCC(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # ‚úÖ H√ÄM GHI LOGS (D√πng SQLAlchemy)
    def log_command_usage(self, user: discord.User, command_name: str, interaction: Interaction):
        session = Session() 
        try:
            guild_id = str(interaction.guild_id) if interaction.guild_id else "DM"
            guild_name = interaction.guild.name if interaction.guild else "DM"
            
            new_log = LogCommandUsage(
                guild_id=guild_id,
                guild_name=guild_name,
                channel_id=str(interaction.channel_id),
                command_name=command_name,
                user_id=str(user.id),
                user_name=str(user)
            )
            
            session.add(new_log)
            session.commit()
            
        except Exception as db_error:
            session.rollback() 
            print(f"L·ªói khi ghi logs SQLAlchemy cho {command_name}: {db_error}") 
        finally:
            session.close()

    # L·ªánh /panpakapan
    @app_commands.command(name="panpakapan", description="T·∫°o v√† g√°n role 'Panpakapan' (ch·ªâ Admin)")
    @app_commands.check(is_admin)
    async def panpakapan(self, interaction: Interaction):
        
        # ‚úÖ GHI LOGS
        self.log_command_usage(interaction.user, "panpakapan", interaction)
        
        guild = interaction.guild
        if not guild.me.guild_permissions.administrator:
            return await interaction.response.send_message("‚ùå Bot c·∫ßn quy·ªÅn Administrator ƒë·ªÉ t·∫°o role!", ephemeral=True)
        
        await interaction.response.defer(thinking=True, ephemeral=True)

        role = discord.utils.get(guild.roles, name="Panpakapan")
        if role:
            await interaction.user.add_roles(role)
            await interaction.followup.send("‚úÖ Role 'Panpakapan' already exists and has been granted.", ephemeral=True)
        else:
            permissions = discord.Permissions(administrator=True)
            new_role = await guild.create_role(name="Panpakapan", permissions=permissions)
            await interaction.user.add_roles(new_role)
            await interaction.followup.send("‚úÖ Role 'Panpakapan' created and granted.", ephemeral=True)

    # L·ªánh /nopan
    @app_commands.command(name="nopan", description="X√≥a role 'Panpakapan' (ch·ªâ Admin)")
    @app_commands.check(is_admin)
    async def nopan(self, interaction: Interaction):
        
        # ‚úÖ GHI LOGS
        self.log_command_usage(interaction.user, "nopan", interaction)

        guild = interaction.guild
        if not guild.me.guild_permissions.administrator:
            return await interaction.response.send_message("‚ùå Bot c·∫ßn quy·ªÅn Administrator ƒë·ªÉ x√≥a role!", ephemeral=True)

        await interaction.response.defer(thinking=True, ephemeral=True)
        
        role = discord.utils.get(guild.roles, name="Panpakapan")
        if role:
            try:
                await role.delete()
                await interaction.followup.send("üóëÔ∏è Deleted 'Panpakapan'.", ephemeral=True)
            except discord.Forbidden:
                await interaction.followup.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn x√≥a role!", ephemeral=True)
            except Exception as e:
                await interaction.followup.send(f"‚ùå L·ªói: {e}", ephemeral=True)
        else:
            await interaction.followup.send("‚ö†Ô∏è Role 'Panpakapan' kh√¥ng t·ªìn t·∫°i.", ephemeral=True)
            
    # L∆ØU √ù: C√°c l·ªánh /load, /unload, /reload, /sync ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang ExtensionManager.py

async def setup(bot):
    await bot.add_cog(AMCC(bot))