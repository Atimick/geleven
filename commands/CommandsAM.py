import discord
import openpyxl
import os
from datetime import datetime, timedelta, timezone
from discord import app_commands, Interaction, Embed, File, ChannelType
from discord.ext import commands

from .id_check import is_admin, is_mod, is_allowed, LOG_FOLDER, BOOST_LOG_PATH

class AMCC(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def log_command_usage(self, user, command_name, channel_id):
        os.makedirs(LOG_FOLDER, exist_ok=True)
        file_path = os.path.join(LOG_FOLDER, "command_log.xlsx")

        if not os.path.exists(file_path):
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "Command Usage"
            ws.append(["User", "User ID", "Command", "Channel ID", "Timestamp"])
            wb.save(file_path)

        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
        ws.append([
            user.display_name,
            str(user.id),
            command_name,
            str(channel_id),
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])
        wb.save(file_path)

    @app_commands.command(name="adm", description="Hi·ªán danh s√°ch l·ªánh Qu·∫£n tr·ªã")
    @app_commands.check(is_allowed) 
    async def adm(self, interaction: Interaction):
        self.log_command_usage(interaction.user, "adm", interaction.channel_id)

        embed = discord.Embed(
            title="üõ†Ô∏è Danh s√°ch l·ªánh Qu·∫£n tr·ªã (Admin/Mod)",
            description="C√°c l·ªánh n√†y ch·ªâ d√†nh cho ng∆∞·ªùi c√≥ quy·ªÅn h·∫°n ph√π h·ª£p.",
            color=discord.Color.orange()
        )

        embed.add_field(
            name="üîß L·ªánh ƒë∆∞·ª£c Ati c·∫•p quy·ªÅn s·ª≠ d·ª•ng:",
            value=(
                "‚Ä¢ `/adm` ‚Äî (Mod/Admin) Hi·ªán danh s√°ch c√°c l·ªánh admin\n"
                "‚Ä¢ `/boosters` ‚Äî üíé (Admin) Li·ªát k√™ th√†nh vi√™n ƒëang Boost server\n"
                "‚Ä¢ `/mdk` ‚Äî (Admin) Thanh l√Ω h√†ng (Us)\n"
                "‚Ä¢ `/mdc` ‚Äî (Admin) Thanh l√Ω kho (Cs)\n"
                "‚Ä¢ `/purgechat` ‚Äî üìÑ (Admin) X√≥a tin nh·∫Øn h√†ng lo·∫°t"
            ),
            inline=False
        )
        if is_admin(interaction):
            embed.add_field(
                name="üõ°Ô∏è L·ªánh ƒë·∫∑c bi·ªát:",
                value=(
                    "‚Ä¢ `/panpakapan` ‚Äî üëë G√°n role 'Panpakapan' v·ªõi quy·ªÅn admin\n"
                    "‚Ä¢ `/nopan` ‚Äî ‚ùå X√≥a role 'Panpakapan'\n"
                    "‚Ä¢ **`/reload`** ‚Äî üîÑ T·∫£i l·∫°i c√°c module (Cog) c·ªßa bot **(Ch·ªâ Ati Admin)**"
                ),
                inline=False
            )

        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi {interaction.user.display_name}", icon_url=interaction.user.display_avatar.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="panpakapan", description="T·∫°o v√† g√°n role 'Panpakapan' v·ªõi quy·ªÅn admin (ch·ªâ Admin)")
    @app_commands.check(is_admin)
    async def panpakapan(self, interaction: Interaction):
        if interaction.guild and interaction.guild.id == 733363418681049159:
            await interaction.response.send_message("\u26a0\ufe0f Server AM denied.", ephemeral=True)
            return

        self.log_command_usage(interaction.user, "panpakapan", interaction.channel_id)

        guild = interaction.guild
        if not guild.me.guild_permissions.administrator:
            await interaction.response.send_message("\u274c Bot c·∫ßn quy·ªÅn Administrator ƒë·ªÉ t·∫°o role!", ephemeral=True)
            return

        existing_role = discord.utils.get(guild.roles, name="Panpakapan")
        if existing_role:
            await interaction.response.send_message("\ud83d\udccc Role 'Panpakapan' exists.", ephemeral=True)
        else:
            permissions = discord.Permissions(administrator=True)
            new_role = await guild.create_role(name="Panpakapan", permissions=permissions)
            await interaction.user.add_roles(new_role)
            await interaction.response.send_message("\u2705 Role 'Panpakapan' added.", ephemeral=True)

    @app_commands.command(name="nopan", description="X√≥a role 'Panpakapan' (ch·ªâ Admin)")
    @app_commands.check(is_admin)
    async def nopan(self, interaction: Interaction):
        self.log_command_usage(interaction.user, "nopan", interaction.channel_id)

        guild = interaction.guild
        if not guild.me.guild_permissions.administrator:
            await interaction.response.send_message("\u274c Bot c·∫ßn quy·ªÅn Administrator ƒë·ªÉ x√≥a role!", ephemeral=True)
            return

        role = discord.utils.get(guild.roles, name="Panpakapan")
        if role:
            try:
                await role.delete()
                await interaction.response.send_message("\ud83d\uddd1\ufe0f Deleted 'Panpakapan'.", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("\u274c Bot kh√¥ng c√≥ quy·ªÅn x√≥a role!", ephemeral=True)
            except Exception as e:
                await interaction.response.send_message(f"\u274c L·ªói: {e}", ephemeral=True)
        else:
            await interaction.response.send_message("\u26a0\ufe0f Kh√¥ng t√¨m th·∫•y 'Panpakapan'.", ephemeral=True)

    @app_commands.command(name="boosters", description="Hi·ªÉn th·ªã danh s√°ch boosters v√† xu·∫•t ra file excel")
    @app_commands.check(is_mod)
    async def boosters(self, interaction: Interaction):
        self.log_command_usage(interaction.user, "boosters", interaction.channel_id)
        
        bot_member = interaction.guild.me
        if not bot_member.guild_permissions.view_guild_insights and not bot_member.guild_permissions.view_audit_log:
            await interaction.response.send_message("‚ùå Bot c·∫ßn quy·ªÅn **Xem nh·∫≠t k√Ω ki·ªÉm duy·ªát** (View Audit Log) ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.", ephemeral=True)
            return
        
        await interaction.response.defer(thinking=True, ephemeral=True)

        boosters = []
        async for member in interaction.guild.fetch_members(limit=None):
            if member.premium_since:
                boost_utc = member.premium_since
                now_utc = datetime.utcnow().replace(tzinfo=timezone.utc)
                boost_vn = boost_utc + timedelta(hours=7)
                days = (now_utc - boost_utc).days
                boosters.append((member, days, boost_utc, boost_vn))
        
        if not boosters:
            await interaction.followup.send("‚ö†Ô∏è Kh√¥ng c√≥ ai ƒëang Boost server.", ephemeral=True)
            return

        embed = Embed(
            title="üíé Danh s√°ch Boosters",
            description=f"Hi·ªán c√≥ `{len(boosters)}` th√†nh vi√™n ƒëang Boost server.",
            color=discord.Color.purple()
        )
        embed.set_footer(text=f"Export b·ªüi: {interaction.user.display_name}", icon_url=interaction.user.display_avatar.url)

        for member, days, boost_utc, boost_vn in boosters[:10]:
            embed.add_field(
                name=f"{member.display_name} ({days} ng√†y)",
                value=f"‚Ä¢ Boost t·ª´ (UTC): `{boost_utc.strftime('%d/%m/%Y %H:%M:%S')}`\n‚Ä¢ Boost t·ª´ (VN): `{boost_vn.strftime('%d/%m/%Y %H:%M:%S')}`",
                inline=False
            )

        if len(boosters) > 10:
            embed.add_field(name="...", value=f"V√† {len(boosters) - 10} ng∆∞·ªùi kh√°c n·ªØa.", inline=False)
            
        await interaction.followup.send(embed=embed, ephemeral=True)

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Boosters"
        ws.append(["Display Name", "Username", "User ID", "Boost Start (UTC)", "Boost Start (VN)", "Boost Days"])

        for m, d, utc, vn in boosters:
            ws.append([m.display_name, m.name, str(m.id), utc.strftime('%d/%m/%Y %H:%M:%S'), vn.strftime('%d/%m/%Y %H:%M:%S'), d])

        os.makedirs(os.path.dirname(BOOST_LOG_PATH), exist_ok=True)
        wb.save(BOOST_LOG_PATH)

        await interaction.followup.send(content="üìÑ File danh s√°ch Boosters:", file=File(BOOST_LOG_PATH), ephemeral=True)

    @app_commands.command(name="mdk", description="Thanh l√Ω h√†ng")
    @app_commands.check(is_admin)
    async def masskick(self, interaction: Interaction):
        self.log_command_usage(interaction.user, "mdk", interaction.channel_id)

        if not interaction.guild.me.guild_permissions.kick_members:
            await interaction.response.send_message("\u274c Bot c·∫ßn quy·ªÅn kick th√†nh vi√™n!", ephemeral=True)
            return

        file_path = os.path.join(os.path.dirname(__file__), "..", "ID-Kicklist.txt")

        if not os.path.exists(file_path):
            await interaction.response.send_message(f"‚ùå Kh√¥ng t√¨m th·∫•y file: `{file_path}`", ephemeral=True)
            return

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                user_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file: {e}", ephemeral=True)
            return

        if not user_ids:
            await interaction.response.send_message("‚ùå File kh√¥ng ch·ª©a ID h·ª£p l·ªá ƒë·ªÉ thanh l√Ω!", ephemeral=True)
            return

        kicked = []
        failed = []

        for uid in user_ids:
            member = interaction.guild.get_member(uid)
            if member:
                try:
                    await member.kick(reason="Thanh l√Ω h√†ng (mass kick by admin)")
                    kicked.append(f"{member.display_name} ({member.id})")
                except Exception as e:
                    failed.append((f"{member.display_name} ({member.id})", str(e)))
            else:
                failed.append((str(uid), "Kh√¥ng t√¨m th·∫•y trong server"))

        msg = ""
        if kicked:
            msg += f"‚úÖ ƒê√£ thanh l√Ω {len(kicked)} h√†ng:\n" + "\n".join(kicked)
        if failed:
            msg += f"\n\n‚ùå L·ªói khi x·ª≠ l√Ω {len(failed)} h√†ng:\n" + "\n".join(f"{name} ({reason})" for name, reason in failed)

        await interaction.response.send_message(f"**K·∫øt qu·∫£ Thanh l√Ω h√†ng:**\n```{msg}```", ephemeral=True)

    @app_commands.command(name="mdc", description="Thanh l√Ω kho")
    @app_commands.check(is_admin)
    async def masschanneldelete(self, interaction: Interaction):
        self.log_command_usage(interaction.user, "mdc", interaction.channel_id)

        if not interaction.guild.me.guild_permissions.manage_channels:
            await interaction.response.send_message("‚ùå Bot c·∫ßn quy·ªÅn **qu·∫£n l√Ω k√™nh**!", ephemeral=True)
            return

        file_path = os.path.join(os.path.dirname(__file__), "..", "ID-ChannelDelete.txt")

        if not os.path.exists(file_path):
            await interaction.response.send_message(f"‚ùå Kh√¥ng t√¨m th·∫•y file: `{file_path}`", ephemeral=True)
            return

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                channel_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file: {e}", ephemeral=True)
            return

        if not channel_ids:
            await interaction.response.send_message("‚ùå File kh√¥ng ch·ª©a ID h·ª£p l·ªá ƒë·ªÉ x√≥a!", ephemeral=True)
            return

        deleted = []
        failed = []

        for cid in channel_ids:
            channel = interaction.guild.get_channel(cid)
            if channel:
                try:
                    await channel.delete(reason="Thanh l√Ω kho (mass delete by admin)")
                    deleted.append(f"{channel.name} ({channel.id})")
                except Exception as e:
                    failed.append((f"{channel.name} ({channel.id})", str(e)))
            else:
                failed.append((str(cid), "Kh√¥ng t√¨m th·∫•y trong server"))

        msg = ""
        if deleted:
            msg += f"‚úÖ ƒê√£ thanh l√Ω {len(deleted)} kho:\n" + "\n".join(deleted)
        if failed:
            msg += f"\n\n‚ùå L·ªói khi x·ª≠ l√Ω {len(failed)} kho:\n" + "\n".join(f"{name} ({reason})" for name, reason in failed)

        await interaction.response.send_message(f"**K·∫øt qu·∫£ Thanh l√Ω kho:**\n```{msg}```", ephemeral=True)
    
    @app_commands.command(name="purgechat", description="X√≥a tin nh·∫Øn trong k√™nh chat, bao g·ªìm c·∫£ k√™nh voice chat.")
    @app_commands.check(is_admin)
    async def purgechat(self, interaction: Interaction):
        """
        X√≥a t·∫•t c·∫£ tin nh·∫Øn trong k√™nh hi·ªán t·∫°i ng∆∞·ª£c v·ªÅ qu√° kh·ª© 14 ng√†y,
        kh√¥ng x√≥a tin nh·∫Øn ƒë√£ ghim v√† tin nh·∫Øn g·ª≠i sau khi l·ªánh ƒë∆∞·ª£c g·ªçi.
        """
        self.log_command_usage(interaction.user, "purgechat", interaction.channel_id)

        # L·∫•y k√™nh ƒë·ªÉ x·ª≠ l√Ω. Ki·ªÉm tra c·∫£ k√™nh vƒÉn b·∫£n th√¥ng th∆∞·ªùng v√† k√™nh vƒÉn b·∫£n c·ªßa voice chat.
        target_channel = interaction.channel
        if not isinstance(target_channel, (discord.TextChannel, discord.VoiceChannel)):
            await interaction.response.send_message(
                "‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c k√™nh chat ho·∫∑c k√™nh voice c√≥ chat.",
                ephemeral=True
            )
            return

        # N·∫øu l·ªánh ƒë∆∞·ª£c g·ªçi trong k√™nh voice, s·ª≠ d·ª•ng k√™nh vƒÉn b·∫£n ƒëi k√®m c·ªßa n√≥
        if isinstance(target_channel, discord.VoiceChannel):
            if not target_channel.type == ChannelType.voice:
                # ƒê√¢y l√† k√™nh voice nh∆∞ng kh√¥ng c√≥ text chat
                # (tr∆∞·ªùng h·ª£p hi·∫øm, nh∆∞ng n√™n x·ª≠ l√Ω)
                await interaction.response.send_message(
                    "‚ùå K√™nh voice n√†y kh√¥ng h·ªó tr·ª£ chat vƒÉn b·∫£n.",
                    ephemeral=True
                )
                return
            pass

        await interaction.response.defer(thinking=True, ephemeral=True)

        try:
            # L·∫•y th·ªùi ƒëi·ªÉm l·ªánh ƒë∆∞·ª£c g·ªçi l√†m m·ªëc
            deleted_messages = await target_channel.purge(
                limit=None,
                before=interaction.created_at,
                check=lambda m: not m.pinned
            )
            
            await interaction.followup.send(
                f"üßπ ƒê√£ d·ªçn d·∫πp th√†nh c√¥ng **{len(deleted_messages)}** tin nh·∫Øn.",
                ephemeral=True
            )

        except discord.Forbidden:
            await interaction.followup.send(
                "‚ùå Bot kh√¥ng c√≥ quy·ªÅn **Qu·∫£n l√Ω tin nh·∫Øn** trong k√™nh n√†y.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: `{e}`",
                ephemeral=True
            )

async def setup(bot):
    await bot.add_cog(AMCC(bot))